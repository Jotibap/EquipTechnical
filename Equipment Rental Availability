import java.util.*;

class EquipmentRental {

    public static List<Integer> findShortestPath(int n, int[][] edges, Map<Integer, List<String>> availability,
                                                 int startProvider, String targetEquipment) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new ArrayList<>());
        }

        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        Queue<Pair<Integer, List<Integer>>> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();

        List<Integer> startPath = new ArrayList<>();
        startPath.add(startProvider);
        queue.offer(new Pair<>(startProvider, startPath));
        visited.add(startProvider);

        while (!queue.isEmpty()) {
            Pair<Integer, List<Integer>> current = queue.poll();
            int currentProvider = current.getKey();
            List<Integer> path = current.getValue();

            if (availability.containsKey(currentProvider) && availability.get(currentProvider).contains(targetEquipment)) {
                return path;
            }

            for (int neighbor : graph.get(currentProvider)) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    List<Integer> newPath = new ArrayList<>(path);
                    newPath.add(neighbor);
                    queue.offer(new Pair<>(neighbor, newPath));
                }
            }
        }

        return Collections.singletonList(-1);
    }

    static class Pair<K, V> {
        private K key;
        private V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() {
            return key;
        }

        public V getValue() {
            return value;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number of providers: ");
        int n = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Enter number of edges: ");
        int edgeCount = scanner.nextInt();
        scanner.nextLine();

        int[][] edges = new int[edgeCount][2];
        System.out.println("Enter edges (providerA providerB):");
        for (int i = 0; i < edgeCount; i++) {
            edges[i][0] = scanner.nextInt();
            edges[i][1] = scanner.nextInt();
            scanner.nextLine();
        }

        Map<Integer, List<String>> availability = new HashMap<>();
        System.out.print("Enter number of availabilities: ");
        int availCount = scanner.nextInt();
        scanner.nextLine();
        System.out.println("Enter availabilities (provider equipment1 equipment2 ...):");

        for (int i = 0; i < availCount; i++) {
            String[] line = scanner.nextLine().split(" ");
            int provider = Integer.parseInt(line[0]);
            List<String> equipmentList = new ArrayList<>();
            for (int j = 1; j < line.length; j++) {
                equipmentList.add(line[j]);
            }
            availability.put(provider, equipmentList);
        }

        System.out.print("Enter start provider: ");
        int startProvider = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Enter target equipment: ");
        String targetEquipment = scanner.nextLine();

        List<Integer> result = findShortestPath(n, edges, availability, startProvider, targetEquipment);
        System.out.println(result);

        scanner.close();
    }
}


//Output

"C:\Program Files\Java\jdk-22\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2024.1.1\lib\idea_rt.jar=51534:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2024.1.1\bin" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath "C:\equip tech\out\production\equip tech" EquipmentRental
Enter number of providers: 5
Enter number of edges: 4
Enter edges (providerA providerB):
1 2
2 3
3 4
4 5
Enter number of availabilities: 3
Enter availabilities (provider equipment1 equipment2 ...):
1 excavator
3 bulldozer
4 excavator
Enter start provider: 2
Enter target equipment: excavator
[2, 1]

Process finished with exit code 0

